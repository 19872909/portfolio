---
title: "Projeto: Previsão de Rotatividade de Clientes Bancários"
---

# Introdução

<p>
O problema de **churn**, ou rotatividade de clientes, representa um desafio significativo para instituições bancárias. Refere-se à taxa na qual os clientes encerram seus relacionamentos com o banco, migrando para outras instituições financeiras ou até mesmo abandonando serviços financeiros. Este fenômeno pode ser impulsionado por diversos fatores, como insatisfação com serviços, concorrência acirrada, mudanças nas condições econômicas e até mesmo avanços tecnológicos.
</p>

<p>
Dessa forma, a retenção de clientes torna-se uma prioridade estratégica para os bancos, que buscam constantemente inovar, oferecer experiências mais atrativas e personalizadas, a fim de mitigar o churn e manter uma base sólida de clientes leais.
</p>

<p>
Diante desse cenário, torna-se de extrema valia a capacidade de identificar os clientes mais propensos ao churn, possibilitando que a instituição financeira aja de maneira antecipada, oferecendo planos e serviços atrativos que impeçam a fuga do cliente.
</p>

# Problema de Negócio
Temos uma base de dados do ABC Multistate Bank, a qual está hospedada em <https://www.kaggle.com/datasets/gauravtopre/bank-customer-churn-dataset/data>. Essa base de dados contém informações anonimizadas de 10.000 clientes, onde o problema de negócio em questão resume-se a construirmos um modelo capaz de predizer a ocorrência ou não de churn para um dado cliente, com base nas informações disponíveis.


# Resolução do Problema

```{python}
#| echo: false
#| output: false
#| warning: false

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

from scipy.stats import shapiro
from functions import (
    create_table_categorical,
    create_graph_categorical,
    create_table_numeric_continuous,
    create_graph_numeric_continuous,
    bivariate,
    create_table_bivariate_summary,
    create_table_bivariate_html,
    create_graph_bivariate_html,
    create_graph_h_bivariate_html
    )
```

## Análise Exploratória dos Dados (EDA)
<p>O objetivo desta etapa é investigar e entender os dados disponíveis, a fim de extrair informações preliminares, identificar padrões, tendências, anomalias e insights relevantes.
</p>

<p>
Verificaremos que, ao término dessa análise, todas as variáveis apresentam comportamento adequado para prosseguirem no estudo, pois:

- Não possuem valores faltantes.
- Não têm valores inesperados.
- Não exibem alta concentração em um único valor.
</p>
<hr>

```{python}
#| echo: false
#| output: false

# Read files
file_name = "Bank Customer Churn Prediction"
df = pd.read_csv(f"./source/{file_name}.csv")


# -> there is no duplciated customer
df.duplicated("customer_id").sum()

# -> there is no missing values
df.isna().sum()

# -> remove cols not useful
df.drop("customer_id", axis = 1, inplace = True)

# -> preprocessing
df_base = df.copy()

# "products_number"
df["products_number"] = np.where(df["products_number"] >= 4 , ">=4", df["products_number"].astype(int).astype(str))

# tenure
var_name = 'tenure'
c1 = df[var_name].between(0,  2,      inclusive = "both")
c2 = df[var_name].between(2,  4,      inclusive = "right")
c3 = df[var_name].between(4,  6,      inclusive = "right")
c4 = df[var_name].between(6,  8,      inclusive = "right")
c5 = df[var_name].between(8,  10,     inclusive = "right")
c6 = df[var_name].between(10, np.inf, inclusive = "neither")

df[var_name] = np.where(
    c1, '[0, 2]', np.where(
        c2, '(2, 4]', np.where(
            c3, '(4, 6]', np.where(
                c4, '(6, 8]', np.where(
                    c5, '(8, 10]', '>10' 
                    )
                )
            )
        )
    ) 
```

### Churn
Essa variável denota a ocorrência ou não do evento de churn.

- Não ocorrência de churn = 0
- Ocorrência de churn = 1


**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável target (binária).</li>
  <li>Temos 20% de ocorrência do evento.</li>
  <li>Temos 80% de não ocorrência do evento.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("churn", df)
```

```{python}
#| fig-align: center
create_graph_categorical("churn", df)
```

<hr>

### Country
País do cliente.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>France representa 50%.</li>
  <li>Germany e Spain representam 25% cada.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("country", df)
```

```{python}
#| fig-align: center
create_graph_categorical("country", df)
```

<hr>

### Gender
Gênero do cliente.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>55% Homens.</li>
  <li>45% Mulheres.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("gender", df)
```
```{python}
#| fig-align: center
create_graph_categorical("gender", df)
```

<hr>

### Credit Card
Se o cliente utiliza cartão de crédito.

- Não utiliza cartão de crédito = 0
- Utiliza cartão de crédito = 1

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>71% utiliza cartão de cŕedito.</li>
  <li>29% não utiliza.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("credit_card", df)
```
```{python}
#| fig-align: center
create_graph_categorical("credit_card", df)
```

<hr>

### Active Member
Denota se um cliente está envolvido e participando ativamente das atividades e serviços oferecidos pelo banco:

- Não ativo = 0
- Ativo = 1


**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>Praticamente metade dos clientes são ativos e a outra metade é inativo.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("active_member", df)
```
```{python}
#| fig-align: center
create_graph_categorical("active_member", df)
```

<hr>

### Products Number
Número de produtos adiquiridos pelo cliente.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica discreta, mas será visualizada como categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>~50% dos cliente utilizam somente um produto.</li>
  <li>~46% dos cliente utilizam 2 produtos.</li>
</ul>

```{python}
#| fig-align: center
create_table_categorical("products_number", df, ['1', '2', '3', '>=4'])
```
```{python}
#| fig-align: center
create_graph_categorical("products_number", df, ['1', '2', '3', '>=4'])
```

<hr>

### Tenure
Mensura a quantidade de anos decorridos desde que o cliente aderiu aos serviços prestados pelo banco.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica discreta, mas será visualizada como categórica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>25% de 0 a 2 anos.</li>
  <li>15% de 8 a 10 anos.</li>
  <li>As demais classes estão bem distribuídos em torno de 20%.</li>
</ul>

```{python}
#| fig-align: center
#fazer a mesma ordenção de baixo aqui
create_table_categorical("tenure", df, ['[0, 2]', '(2, 4]', '(4, 6]', '(6, 8]', '(8, 10]'])
```
```{python}
#| fig-align: center
create_graph_categorical("tenure", df, ['[0, 2]', '(2, 4]', '(4, 6]', '(6, 8]', '(8, 10]'])
```

<hr>

### Credit Score
É uma medida da probabilidade de um indivíduo pagar suas dívidas com base em seu histórico de crédito passado.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>Possui distribuição aproximadamente normal, com média = 650.</li>
</ul>

```{python}
#| fig-align: center
create_table_numeric_continuous("credit_score", df)
```
```{python}
#| fig-align: center
create_graph_numeric_continuous("credit_score", df)
```

<hr>

### Age
Idade em anos do cliente.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>Possui distribuição assimétrica á direita.</li>
  <li>Cliente mais novo tem 18 anos.</li>
  <li>Cliente mais velho tem 92 anos.</li>
  <li>O valor mediano da idade do cliente é de 37 anos.</li>

</ul>

```{python}
#| fig-align: center
create_table_numeric_continuous("age", df)
```
```{python}
#| fig-align: center
create_graph_numeric_continuous("age", df)
```

<hr>

### Balance
Saldo bancário do cliente

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>Variável com distribuição assimétrica.</li>
  <li>Alta concetração de clientes com saldo entre 0 e 25 mil.</li>
</ul>

```{python}
#| fig-align: center
create_table_numeric_continuous("balance", df)
```
```{python}
#| fig-align: center
create_graph_numeric_continuous("balance", df)
```

<hr>

### Estimated Salary
Salario estimado.

**Avaliação**: <span style="color: green;"> OK. </span>
<ul>
  <li>Variável numérica.</li>
  <li>Não possui nenhum valor faltante.</li>
  <li>Variável com distribuição uniforme.</li>
</ul>

```{python}
#| fig-align: center
create_table_numeric_continuous("estimated_salary", df)
```
```{python}
#| fig-align: center
create_graph_numeric_continuous("estimated_salary", df)
```

## Análise Bivariada dos Dados
<p>
A análise bivariada tem como objetivo examinar a relação entre duas variáveis em um conjunto de dados. Ao contrário da análise univariada, que se concentra em uma única variável (EDA que fizemos no item anterior), a análise bivariada explora a associação entre duas variáveis.
</p>
 
<p>
Existem diferentes técnicas e métodos para realizar uma análise bivariada, dependendo da natureza das variáveis envolvidas.
Para o nosso problema, estamos interessados em avaliar o grau de associação entre cada uma das possíveis variáveis preditoras e a variável target, dessa forma temos que:

- churn: Categórica Binária (target)

- country: Categórica
- gender: Categórica
- credit_card: Categórica
- active_member: Categórica

- producs_number: Numérica Discreta
- tenure: Numérica Discreta
- credit_score: Numérica Contínua
- age: Numérica Discreta 

- balance: Numérica Contínua
- estimated_salary: Numérica Contínua
</p>

<p>
A nossa abordagem será transformar todas as variáveis preditoras em categóricas, para posteriormente avaliarmos o grau de associação de cada uma delas frente a variável target, para isso teremos basicamente duas etapas:
<ol>
  <li>Binning das variáveis.</li>
  <li>Avaliação do Grau de Associação.</li>
</ol>
</p>

<hr>

**Binning**
<p>
Chamaremos esse processo de transformação de uma variável numérica em categórica de binning. O processo de binning será feito através de um método denominado de  **optimal binning** <https://gnpalencia.org/optbinning/>.
</p>

<p>
O optimal binning refere-se a uma abordagem estatística utilizada em análise de dados para agrupar valores de uma variável em intervalos (ou "bins") de maneira a otimizar algum critério específico. A principal ideia por trás do binning ótimo é encontrar a divisão mais informativa ou significativa das observações, geralmente com base em algum critério de interesse, como a maximização da diferença nas médias entre os grupos ou a minimização da variabilidade intra-bin.
</p>

<p>
Ou seja, de forma resumida, vamos pegar um certa variável, por exemplo o balance (saldo da conta) e tentar discretizar em categorias onde fique mais evidente se a ocorrência de churn é maior ou menor.
</p>

<p>
Vale ressaltar que também vamos aplicar o optimal binning para as variáveis que já são categóricas, uma vez que esse processo de otimização pode gerar agrupamentos mais informativos (quanto a ocorrência de churn) do que as categorias já existentes.
</p>

<hr>

**Avaliação do Grau de Associação**
<p>
Neste momento todas as nossas variáveis (preditoras e target) são categóricas, então para mensurar o grau de associação entre cada preditora e o target, utilizaremos o coeficiente **Cramer's V** (V de Cramer).
</p>

<p>
O coeficiente V de Cramer é uma medida estatística utilizada em análises bivariadas para quantificar a força de associação entre duas variáveis categóricas. Essa medida é uma extensão do coeficiente qui-quadrado, que é comumente utilizado para testar a independência entre variáveis categóricas.

O coeficiente V de Cramer varia de 0 a 1, onde 0 indica nenhuma associação e 1 indica associação total entre as variáveis categóricas.
<https://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V>
</p>

<hr>

**Resultado da Análise Bivariada**

Após o término da análise bivariada, conforme a tabela abaixo e os demais resultados que veremos na sequência, veremos que:

- age: É a variável com maior grau de associação com o evento de churn (Alta discriminância).
- products_number, country, active_member: Estão associadas de forma moderada com o evento de churn (Média discriminância).
- credit_score, tenure, estimated_salary e credit_card: Possuem baixo grau de associação com o evento de churn (Baixa discriminância).

As variáveis com alta e média discriminância têm maiores chances de serem consideradas como preditoras no modelo preditivo que iremos construir. Em contrapartida, as variáveis de baixa discriminância possuem menor propensão de serem utilizadas como preditoras nesse modelo."


**Observação** 
<p>
O critério utilizado para definir a discriminância não está levando em conta apenas se o valor de Cramer’s V está muito próximo de 0 ou 1, mas também considera o contexto dessa análise. Por exemplo, para a variável idade, temos Cramer’s V = 0.36, que é um valor mais próximo de 0 do que de 1. Se considerássemos apenas essa questão, diríamos que o grau de associação é moderado ou baixo.

No entanto, no contexto desta análise, a variável idade é a que possui o maior Cramer’s V. Portanto, dentro do nosso contexto, estamos considerando que o grau de associação com o evento é forte.

Para fins de esclarecimento, consideramos que:

- Cramer's V > 0.20: Discriminância Alta.
- 0.20 <= Cramer's V < 0.05: Discriminância Média.
- Cramer's V <= 0.05: Discriminância Baixa.
</p>

```{python}
#| fig-align: center
numerical_variables = [
    "products_number",
    "tenure",
    "credit_score",
    "age",
    "estimated_salary"
    ]

categorical_variables = [
    "country", 
    "gender", 
    "credit_card",
    "active_member",
    "balance",
    ]

target_variable = 'churn'

df = df_base

# balance
var_name = 'balance'
c1 = df[var_name].between(-np.inf,  1884.34, inclusive = "neither")
df[var_name] = np.where(c1, '< 1884.34', '>= 1884.34')

df_bivariate = bivariate(
    df,
    numerical_variables,
    categorical_variables,
    target_variable)

df_bivariate.rename(columns = {"Indicador":"Feature"}, inplace = True)

df = (
  df_bivariate[["Feature", "Cramer's V", "Discriminância"]]
  .drop_duplicates()
  .sort_values(by = ["Cramer's V", "Feature"], ascending = False)
  .reset_index(drop = True)
  )
    
create_table_bivariate_summary(df, cols_float = ["Cramer's V"])
```

### Age

**Discriminância**: <span style="color: green;"> Alta. </span>
<ul>
  <li>Quanto mais velho for o cliente, maior é a propensão de ocorrência do churn.</li>
</ul>

```{python}
#| fig-align: center
var = "age"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Products Number

**Discriminância**: <span style="color: yellow;"> Média. </span>
<ul>
  <li>A ocorrência do churn é maior para clientes que contrataram somente 1 produto.</li>
</ul>

```{python}
#| fig-align: center
var = "products_number"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Country

**Discriminância**: <span style="color: yellow;"> Média. </span>
<ul>
  <li>A ocorrência do churn é maior para clientes da Alemanha.</li>
</ul>

```{python}
#| fig-align: center
var = "country"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Active Member

**Discriminância**: <span style="color: yellow;"> Média. </span>
<ul>
  <li>A ocorrência do churn é maior para clientes que não são ativos.</li>
</ul>

```{python}
#| fig-align: center
var = "active_member"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Balance

**Discriminância**: <span style="color: yellow;"> Média. </span>
<ul>
  <li>A ocorrência do churn é maior para clientes com saldo em conta maior ou igual a 1884.34 .</li>
</ul>

```{python}
#| fig-align: center
var = "balance"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Gender

**Discriminância**: <span style="color: yellow;"> Média. </span>
<ul>
  <li>A ocorrência do churn é maior para clientes do sexo feminino.</li>
</ul>

```{python}
#| fig-align: center
var = "gender"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Credit Score

**Discriminância**: <span style="color: #800000;"> Baixa. </span>
<ul>
  <li>O fato isolado de quão bom ou ruim é o credit_score do cliente, não tem forte relação com o evento de churn.</li>
</ul>

```{python}
#| fig-align: center
var = "credit_score"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Tenure

**Discriminância**: <span style="color: #800000;"> Baixa. </span>
<ul>
  <li>O fato isolado da quantidade de anos decorridos desde que o cliente aderiu aos serviços prestados pelo banco, não tem forte relação com o evento de churn.</li>
</ul>

```{python}
#| fig-align: center
var = "tenure"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Estimated Salary

**Discriminância**: <span style="color: #800000;"> Baixa. </span>
<ul>
  <li>O fato isolado de quão alto ou baixo é o salário do cliente, não tem forte relação com o evento de churn.</li>
</ul>

```{python}
#| fig-align: center
var = "estimated_salary"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

<hr>

### Credit Card

**Discriminância**: <span style="color: #800000;"> Baixa. </span>
<ul>
  <li>O fato isolado do cliente ter ou não cartão de cŕedito, não tem forte relação com o evento de churn.</li>
</ul>

```{python}
#| fig-align: center
var = "credit_card"
create_table_bivariate_html(df_bivariate, var)
```

```{python}
#| fig-align: center
create_graph_bivariate_html(df_bivariate, var)
```

## O Modelo Preditivo

Assim que possível estarei atualizando esse tópico.

